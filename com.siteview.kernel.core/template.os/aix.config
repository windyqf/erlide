{id,"AIX"}.
{name,"AIX"}.
{description,"AIX"}.
{disks,[{command,"/usr/bin/df -k"},{mount,7},{name,1}]}.
{disk,[{command,"/usr/bin/df -k <disk>"},{total,2},{free,3},{percentUsed,4}]}.
%%%%{memory,[{command,"/usr/sbin/lsps -s"},{usedPercentage,2},{swapUnit,1048576},{total,1},{startLine,2}]}.
{memory,[{command,"svmon -G"},{total,2},{used,3},{free,4},{swapUnit,4096},{matchLine,"memory"}]}.
{pageFault,[{command,"/usr/bin/vmstat -s"},{pageFaults,1},{matchLine,"/\d (page ins|page outs)/"}]}.
{cpu,[{command,"/usr/bin/vmstat 3 2"},{startLine,5},{wait,17},{idle,16}]}.
%%%%{process,[{command,"export COLUMNS=200;/usr/bin/ps -e -o \"%a\""},{nameColumnName,"COMMAND"},{startLine,3},{headerLine,2}]}.
{process,[{command,"export COLUMNS=200; setenv COLUMNS 200; /usr/bin/ps -e -o \"%a\""},{nameColumnName,"COMMAND"},{startLine,3},{headerLine,2}]}.
{processDetail,[{command,"/usr/bin/ps -el"},{nameColumnName,"CMD"},{sizeColumnName,"SZ"},{startLine,2},{headerLine,1},{pageSize,1024}]}.
{getPPID,[{command,"/usr/bin/ps -fp <pid> | awk 'NR == 2 {print $3}'"}]}.
{serviceMonitor,[{command,"/bin/ps -e -o vsz=MEMSIZE -o args=COMMAND"},{nameColumnName,"COMMAND"},{sizeColumnName,"MEMSIZE"},{pageSize,1024},{startLine,2}]}.
{proc,[{command,"/bin/ps -e -o user -o fname"},{nameColumnName,"COMMAND"},{userColumnName,"USER"},{startLine,2}]}.
{vmstat,[{command,"/usr/bin/vmstat 2 2"},{memorySwap,4},{memoryFree,5},{cpuUser,14},{cpuSystem,15},{startLine,4}]}.
{platform,[{command,"/bin/uname -m"}]}.
{version,[{command,"/bin/uname -a"},{singleLine,true}]}.
{address,[{command,"/usr/sbin/ifconfig -a"},{addressMatch,"HWaddr"}]}.
{physicalmemory,[{command,"/bin/cat /proc/meminfo"},{memoryMatch,"MemTotal:"}]}.
{processor,[{command,"/bin/cat /proc/cpuinfo"},{speedMatch,"cpu Mhz"}]}.
{getSH,[{command,"/bin/sh"}]}.
{bootprom,[{command,"/usr/sbin/prtconf -V"}]}. %??

{package,[{command,"/bin/rpm"},{nameMatch,"Name"},{descMatch,"Summary"},{versMatch,"Version"}]}. %??

{patch,[{command,"/usr/bin/showrev -p"},{match,"Patch:"}]}.
{nic,[{command,"/bin/netstat -i -n"},{startLine,2},{name,1},{address,4}]}.
{nicHost,[{command,"/bin/netstat -i"},{startLine,2},{name,1},{host,4}]}.
{directory,[command,"/bin/ls -A -1 -p"]}.
{network,[{command,"/bin/netstat -s"},{packetsReceivedMatch,"total packets received"},{packetsSentMatch,"requests sent out"},{bytesSentMatch,"tcpOutDataBytes xxx"},{bytesReceivedMatch,"tcpInInorderBytes  xxx"}]}.
{paging,[{command,"/usr/sbin/swap -l"},{blocks,4},{free,5},{startLine,2},{blockSize,512}]}.
{filesize,[{command,"/usr/bin/ls -l <file>"},{size,5}]}.
{tail,[{command,"/usr/bin/tail -c +<bytes> <file>"}]}.
{fileExists,[{command,"/usr/bin/test -r <file>; echo $?"},{match,"0"}]}.
{fileList,[{command,"/usr/bin/ls -l <directory> | /usr/bin/grep -v \"^total\" | /usr/bin/grep -v \"^d\" | /usr/bin/sed 's/  */!/g' | /usr/bin/cut -d\! -f5,9"}]}.
{systemTime,[{command,"echo ssDateStart; /usr/bin/date -u +\"%m/%d/%Y %H:%M:%S\"; /usr/bin/date +\"%m/%d/%Y %H:%M:%S\""}]}.
{catFile,[{command,"/usr/bin/cat <file>"}]}.

{fileListExtend,[{command,"/usr/bin/ls -l <directory> | /usr/bin/grep -v \"^total\" | /usr/bin/grep -v \"^d\" | /usr/bin/sed 's/  */!/g' | /usr/bin/cut -d\! -f5,6,7,8,9"}]}.

{fileListExtendRecursive,[{command,"/usr/bin/ls -l -R <directory> | /usr/bin/grep -v \"^total\" | /usr/bin/grep -v \"^d\" | /usr/bin/grep -v \"^/\" | /usr/bin/sed 's/  */!/g' | /usr/bin/cut -d\! -f5,6,7,8,9"}]}.

{directoryExists,[{command,"/usr/bin/cd <directory>"}]}.

{echoLocale,[{command,"echo $LC_ALL"}]}.

{echoLang,[{command,"echo $LANG"}]}.

{echoShell,[{command,"basename `echo $SHELL`"}]}.

{classifyFiles,[{command,"/usr/bin/ls -F -1"}]}.

{traceroute,[{command,"/usr/sbin/traceroute -m <hops>"}]}.

{match,[{command,"tail -c +<offset> <file> | iconv -f<encoding> -tUTF-8 | awk 'BEGIN{lines=0; if(\"<multiline>\") { RS =\"\" }} { if((regexp && match($0, \"<contentmatch>\", groups)) || (!regexp && index($0, \"<contentmatch>\"))) {lines=lines+1; for(elem in groups) last_groups[elem]=groups[elem]}} END {print lines; i=1; while(i) { if(i in last_groups) { print last_groups[i]; i=i+1;} else { break}} }' regexp=<regexp>"}]}.
{errpt,[{command,"errpt"}]}.