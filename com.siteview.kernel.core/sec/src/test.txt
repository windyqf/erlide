[{decoder,"pam",[{program_name,"(pam_unix)$"}]},
 {decoder,"pam",[{program_name,[]},{prematch,"^pam_unix|^\\(pam_unix\\)"}]},
 {decoder,"pam-user",
          [{parent,"pam"},
           {prematch,"^session \\w+"},
           {after_prematch,"^for user (\\S+)"},
           {order,"user"}]},
 {decoder,"pam-host-user",
          [{parent,"pam"},
           {prematch,"rhost=\\S+\\s+user=\\S+"},
           {regex,"rhost=(\\S+)\\s+user=(\\S+)"},
           {order,"srcip, user"}]},
 {decoder,"pam-host",
          [{parent,"pam"},
           {prematch,"rhost"},
           {after_prematch,"^=(\\S+)"},
           {order,"srcip"}]},
 {decoder,"sshd",[{program_name,"^sshd"}]},
 {decoder,"sshd-success",
          [{parent,"sshd"},
           {prematch,"^Accepted"},
           {after_prematch,"^ \\S+ for (\\S+) from (\\S+) port"},
           {order,"user, srcip"},
           {fts,"name, user, location"}]},
 {decoder,"ssh-denied",
          [{parent,"sshd"},
           {prematch,"^User \\S+ from"},
           {regex,"^User (\\S+) from (\\S+)"},
           {order,"user, srcip"}]},
 {decoder,"sshd-success-solaris",
          [{parent,"sshd"},
           {prematch,"^User"},
           {after_prematch,"^(\\S+), coming from (\\S+),"},
           {order,"user, srcip"},
           {fts,"name, user, location"}]},
 {decoder,"ssh-invfailed",
          [{parent,"sshd"},
           {prematch,"^Failed \\S+ for invalid user|^Failed \\S+ for illegal user"},
           {after_prematch,"from (\\S+) port \\d+ \\w+$"},
           {order,"srcip"}]},
 {decoder,"ssh-failed",
          [{parent,"sshd"},
           {prematch,"^Failed \\S+"},
           {after_prematch,"^for (\\S+) from (\\S+) port \\d+ \\w+$"},
           {order,"user, srcip"}]},
 {decoder,"ssh-error",
          [{parent,"sshd"},
           {prematch,"^error: PAM: Authentication \\w+"},
           {after_prematch,"^for (\\S+) from (\\S+)$"},
           {order,"user, srcip"}]},
 {decoder,"ssh-reverse-mapping",
          [{parent,"sshd"},
           {prematch,"^reverse mapping checking"},
           {after_prematch,"^\\w+ for (\\S+)"},
           {order,"srcip"}]},
 {decoder,"ssh-invalid-user",
          [{parent,"sshd"},
           {prematch,"^Invalid user|^Illegal user"},
           {after_prematch,"from (\\S+)$"},
           {order,"srcip"}]},
 {decoder,"ssh-scan",
          [{parent,"sshd"},
           {prematch,"^scanned from"},
           {after_prematch,"(\\S+)"},
           {order,"srcip"}]},
 {decoder,"ssh-scan2",
          [{parent,"sshd"},
           {prematch,"^Did not receive identification|^Bad protocol version"},
           {after_prematch,"from (\\S+)$"},
           {order,"srcip"}]},
 {decoder,"telnetd",[{program_name,"^telnetd|^in.telnetd"}]},
 {decoder,"telnetd-ip",
          [{parent,"telnetd"},
           {regex,"from (\\d+.\\d+.\\d+.\\d+)$"},
           {order,"srcip"}]},
 {decoder,"smbd",[{program_name,"^smbd"}]},
 {decoder,"smbd-user",
          [{parent,"smbd"},
           {prematch,"User name:"},
           {after_prematch,"^ (\\S+)."},
           {order,"user"}]},
 {decoder,"smbd-ip",
          [{parent,"smbd"},
           {regex,"from \\((\\d+.\\d+.\\d+.\\d+)\\)"},
           {order,"srcip"}]},
 {decoder,"sudo",
          [{program_name,"^sudo"},
           {regex,"^\\s+(\\S+)\\s:"},
           {order,"user"},
           {fts,"name,user,location"},
           {ftscomment,"First time user executed the sudo command"}]},
 {decoder,"su",[{program_name,"^su$"}]},
 {decoder,"su-detail",
          [{parent,"su"},
           {prematch,"^'su"},
           {regex,"^'su (\\S+)' \\S+ for (\\S+) on \\S+$"},
           {order,"dstuser, srcuser"},
           {fts,"name, srcuser, location"}]},
 {decoder,"su-detail2",
          [{parent,"su"},
           {regex,"^BAD SU (\\S+) to (\\S+) on|"},
           {regex,"^failed: \\S+ changing from (\\S+) to (\\S+)|"},
           {regex,"^\\S \\S+ (\\S+)\\p(\\S+)$|^(\\S+) to (\\S+) on"},
           {order,"srcuser, dstuser"},
           {fts,"name, srcuser, location"}]},
 {decoder,"su",
          [{prematch,"^SU \\S+ \\S+"},
           {after_prematch,"^\\S \\S+ (\\S+)-(\\S+)$"},
           {order,"srcuser, dstuser"},
           {fts,"name, srcuser, location"}]},
 {decoder,"proftpd",[{program_name,"^proftpd"}]},
 {decoder,"proftpd-success",
          [{parent,"proftpd"},
           {prematch,": Login successful"},
           {regex,"^\\S+ \\(\\S+[(\\S+)]\\)\\s*\\S \\w+ (\\S+):"},
           {regex,"Login successful"},
           {order,"srcip, user"},
           {fts,"name, user, srcip, location"}]},
 {decoder,"proftpd-ip",
          [{parent,"proftpd"},
           {regex,"^\\S+ \\(\\S+[(\\S+)]\\)"},
           {order,"srcip"}]},
 {decoder,"pure-ftpd",[{program_name,"^pure-ftpd"}]},
 {decoder,"pure-ftpd-login",
          [{parent,"pure-ftpd"},
           {prematch,"^\\S+ [INFO] \\S+ is now logged in"},
           {regex,"^\\(?@(\\S+)\\) [INFO] (\\S+) is now logged in"},
           {order,"srcip, user"},
           {fts,"name, user, srcip, location"}]},
 {decoder,"pure-ftpd-generic",
          [{parent,"pure-ftpd"},
           {regex,"^\\((\\S+)@(\\S+)\\) ["},
           {order,"user,srcip"}]},
 {decoder,"vsftpd",
          [{prematch,"^\\w\\w\\w \\w\\w\\w\\s+\\d+ \\S+ \\d+ [pid \\d+]"},
           {after_prematch,"Client \"(\\d+.\\d+.\\d+.\\d+)\"$"},
           {order,"srcip"}]},
 {decoder,"vsftpd",
          [{program_name,"^vsftpd"},
           {prematch,"^\\w\\w\\w \\w\\w\\w\\s+\\d+ \\S+ \\d+ [pid \\d+]"},
           {after_prematch,"Client \"(\\d+.\\d+.\\d+.\\d+)\"$"},
           {order,"srcip"}]},
 {decoder,"ftpd",[{program_name,"^ftpd|^in.ftpd"}]},
 {decoder,"ftpd-mac-failure",
          [{parent,"ftpd"},
           {prematch,"^Failed authentication from: \\S+ |"},
           {prematch,"^repeated login failures from"},
           {after_prematch,"[(\\d+.\\d+.\\d+.\\d+)]$"},
           {order,"srcip"}]},
 {decoder,"ftpd-refused",
          [{parent,"ftpd"},
           {prematch,"^FTP LOGIN REFUSED"},
           {after_prematch,"[(\\d+.\\d+.\\d+.\\d+)]$"},
           {order,"srcip"}]},
 {decoder,"ftpd-ip",
          [{parent,"ftpd"},
           {regex,"from (\\d+.\\d+.\\d+.\\d+)$"},
           {order,"srcip"}]},
 {decoder,"arpwatch",[{program_name,"^arpwatch"}]},
 {decoder,"arpwatch-new",
          [{parent,"arpwatch"},
           {prematch,"^new station |^bogon"},
           {after_prematch,"^(\\d+.\\d+.\\d+.\\d+) (\\S+)"},
           {order,"srcip, extra_data"},
           {fts,"name, srcip, extra_data"}]},
 {decoder,"mysql_log",[{prematch,"^MySQL log:"}]},
 {decoder,"postgresql_log",
          [{prematch,"^[\\d\\d\\d\\d-\\d\\d-\\d\\d \\S+ \\w+]"},
           {after_prematch,"^\\S+ (\\w+):"},
           {order,"status"}]},
 {decoder,"imapd",
          [{program_name,"^imapd"},
           {after_prematch,"user=(\\S+) \\.+ [(\\d+.\\d+.\\d+.\\d+)]$"},
           {order,"user,srcip"}]},
 {decoder,"vpopmail",[{program_name,"^vpopmail"}]},
 {decoder,"vpopmail-fail",
          [{parent,"vpopmail"},
           {prematch,"^vchkpw-\\S+: password fail"},
           {after_prematch,"(\\S+)@\\S+:(\\d+.\\d+.\\d+.\\d+)$"},
           {order,"user, srcip"}]},
 {decoder,"vpopmail-notfound",
          [{parent,"vpopmail"},
           {prematch,"^vchkpw-\\S+: vpopmail user not"},
           {after_prematch,"^found (\\S+):(\\d+.\\d+.\\d+.\\d+)$"},
           {order,"user, srcip"}]},
 {decoder,"vpopmail-empty",
          [{parent,"vpopmail"},
           {prematch,"^vchkpw-\\S+: null password"},
           {after_prematch,"^given (\\S+):(\\d+.\\d+.\\d+.\\d+)$"},
           {order,"user, srcip"}]},
 {decoder,"vpopmail-success",
          [{parent,"vpopmail"},
           {prematch,"^vchkpw-\\S+: \\(\\S+\\) login"},
           {after_prematch,"^success (\\S+):(\\d+.\\d+.\\d+.\\d+)$"},
           {order,"user, srcip"}]},
 {decoder,"vm-pop3d",[{program_name,"^vm-pop3d"}]},
 {decoder,"vm-pop3d-fail",
          [{parent,"vm-pop3d"},
           {prematch,"^User '"},
           {after_prematch,"^(\\S+)' - \\w+ auth,"},
           {regex,"from=(\\d+.\\d+.\\d+.\\d+)$"},
           {order,"user, srcip"}]},
 {decoder,"courier",[{program_name,"^pop3d|^courierpop3login|^imaplogin"}]},
 {decoder,"courier-login",
          [{parent,"courier"},
           {prematch,"^LOGIN,"},
           {after_prematch,"^user=(\\S+), ip=[(\\S+\\d)]$"},
           {order,"user, srcip"}]},
 {decoder,"courier-generic",
          [{parent,"courier"},{regex,", ip=[(\\S+\\d)]$"},{order,"srcip"}]},
 {decoder,"dovecot",[{program_name,"^dovecot"}]},
 {decoder,"dovecot-success",
          [{parent,"dovecot"},
           {prematch,"^\\w\\w\\w\\w-login: Login:"},
           {after_prematch,"^user=\\p(\\S+)\\p, method=\\S+, rip=(\\S+),"},
           {order,"user, srcip"}]},
 {decoder,"dovecot-aborted",
          [{parent,"dovecot"},
           {prematch,"^\\w\\w\\w\\w-login: Aborted login"},
           {after_prematch,"user=\\p\\S+>, method=\\w+, rip=(\\S+), lip=\\S+"},
           {order,"srcip"}]},
 {decoder,"dovecot-disconnect",
          [{parent,"dovecot"},
           {prematch,"^\\w\\w\\w\\w-login: Disconnected:"},
           {after_prematch,"^rip=(\\S+),"},
           {order,"srcip"}]},
 {decoder,"named",[{program_name,"^named"}]},
 {decoder,"named_client",
          [{parent,"named"},
           {prematch,"^client"},
           {after_prematch,"^(\\d+.\\d+.\\d+.\\d+)#"},
           {order,"srcip"}]},
 {decoder,"named_from",
          [{parent,"named"},
           {regex,"from [(\\d+.\\d+.\\d+.\\d+)]"},
           {order,"srcip"}]},
 {decoder,"amavis",[{program_name,"^amavis"}]},
 {decoder,"amavis-passed-clean",
          [{parent,"amavis"},
           {prematch,"\\.+Passed CLEAN"},
           {after_prematch,"[(\\d+.\\d+.\\d+.\\d+)]\\.+<(\\S+)> -> <(\\S+)>"},
           {order,"srcip,from,to"}]},
 {decoder,"postfix",[{program_name,"^postfix"}]},
 {decoder,"postfix-reject",
          [{use_own_name,"true"},
           {parent,"postfix"},
           {prematch,"^NOQUEUE: reject: \\w\\w\\w\\w from"},
           {after_prematch,"[(\\d+.\\d+.\\d+.\\d+)]: (\\d+) \\.+from=<(\\S+)>\\.+to=<(\\S+)>"},
           {order,"srcip,id,from,to"}]},
 {decoder,"postfix-sasl",
          [{parent,"postfix"},
           {prematch,"^warning: \\S+: SASL"},
           {regex,"^warning: \\S+[(\\d+.\\d+.\\d+.\\d+)]:"},
           {order,"srcip"}]},
 {decoder,"sendmail-reject",
          [{program_name,"^sendmail|^sm-mta|^sm-msp-queue"}]},
 {decoder,"sendmail-pre-greeting",
          [{parent,"sendmail-reject"},
           {prematch,"^\\S+: rejecting commands from"},
           {after_prematch,"^ \\S+ [(\\d+.\\d+.\\d+.\\d+)]"},
           {order,"srcip"}]},
 {decoder,"sendmail-reject-nodns",
          [{parent,"sendmail-reject"},
           {prematch,"relay=["},
           {after_prematch,"^(\\d+.\\d+.\\d+.\\d+)]"},
           {order,"srcip"}]},
 {decoder,"sendmail-reject-dns",
          [{parent,"sendmail-reject"},
           {prematch,"relay=\\S+ ["},
           {after_prematch,"^(\\d+.\\d+.\\d+.\\d+)]"},
           {order,"srcip"}]},
 {decoder,"smf-sav-reject",
          [{program_name,"^smf-sav"},
           {prematch,"^sender check failed|"},
           {prematch,"^sender check tempfailed"},
           {after_prematch,"^ \\(cached\\): \\S+, (\\d+.\\d+.\\d+.\\d+),|"},
           {regex,"^: \\S+, (\\d+.\\d+.\\d+.\\d+),"},
           {order,"srcip"}]},
 {decoder,"mailscanner",[{program_name,"^MailScanner"}]},
 {decoder,"mailscanner-ip",
          [{parent,"mailscanner"},
           {prematch,"^Message \\S+ from"},
           {after_prematch,"^(\\d+.\\d+.\\d+.\\d+) \\S+ to \\S+ is (\\w+)"},
           {order,"srcip, action"}]},
 {decoder,"iptables",[{program_name,"^kernel"}]},
 {decoder,"iptables-1",
          [{parent,"iptables"},
           {type,"firewall"},
           {prematch,"^[\\d+.\\d+] \\S+ IN="},
           {regex,"^[\\d+.\\d+] (\\S+) \\.+ SRC=(\\S+) DST=(\\S+)"},
           {regex,"\\.+ PROTO=(\\w+)"},
           {order,"action,srcip,dstip,protocol"}]},
 {decoder,"iptables-1",
          [{parent,"iptables"},
           {type,"firewall"},
           {regex,"^SPT=(\\d+) DPT=(\\d+)"},
           {order,"srcport,dstport"}]},
 {decoder,"iptables-2",
          [{parent,"iptables"},
           {type,"firewall"},
           {prematch,"^\\S+ IN="},
           {regex,"^(\\S+) \\.+ SRC=(\\S+) DST=(\\S+) \\.+"},
           {regex,"PROTO=(\\w+)"},
           {order,"action,srcip,dstip,protocol"}]},
 {decoder,"iptables-2",
          [{parent,"iptables"},
           {type,"firewall"},
           {regex,"^SPT=(\\d+) DPT=(\\d+)"},
           {order,"srcport,dstport"}]},
 {decoder,"iptables-shorewall",
          [{parent,"iptables"},
           {type,"firewall"},
           {prematch,"^Shorewall:\\S+:"},
           {after_prematch,"^(\\S+):\\.+ SRC=(\\S+) DST=(\\S+) \\.+"},
           {regex,"PROTO=(\\w+)"},
           {order,"action,srcip,dstip,protocol"}]},
 {decoder,"iptables-shorewall",
          [{parent,"iptables"},
           {type,"firewall"},
           {regex,"^SPT=(\\d+) DPT=(\\d+)"},
           {order,"srcport,dstport"}]},
 {decoder,"ipfilter",
          [{type,"firewall"},
           {program_name,"^ipmon"},
           {regex,"(\\w) (\\d+.\\d+.\\d+.\\d+),(\\d+) ->"},
           {regex,"(\\d+.\\d+.\\d+.\\d+),(\\d+) PR (\\w+)"},
           {order,"action,srcip,srcport,dstip,dstport,protocol"}]},
 {decoder,"aix-ipsec",
          [{type,"firewall"},
           {program_name,"^ipsec_logd"},
           {regex,"R:(\\w)  \\w:\\S+ S:(\\d+.\\d+.\\d+.\\d+)"},
           {regex,"D:(\\d+.\\d+.\\d+.\\d+) P:(\\S+) SP:(\\d+) DP:(\\d+)"},
           {order,"action,srcip,dstip,protocol,srcport,dstport"}]},
 {decoder,"pf",
          [{type,"firewall"},
           {program_name,"^pf$"},
           {plugin_decoder,"PF_Decoder"}]},
 {decoder,"sonicwall",
          [{type,"firewall"},
           {prematch,"^id=\\w+ sn=\\w+ time=\\S+ \\S+ fw=\\S+ pri=\\d"},
           {plugin_decoder,"SonicWall_Decoder"}]},
 {decoder,"netscreenfw",[{program_name,[]},{prematch,"^NetScreen device_id"}]},
 {decoder,"netscreenfw-traffic",
          [{parent,"netscreenfw"},
           {type,"firewall"},
           {prematch,"system-notification-00257"},
           {prematch,"\\(traffic\\):"},
           {after_prematch,"proto=(\\w+) \\.+action=(\\w+)"},
           {regex,"\\.+src=(\\S+) dst=(\\S+) src_port=(\\d+) dst_port=(\\d+)"},
           {order,"protocol, action, srcip, dstip, srcport, dstport"}]},
 {decoder,"netscreenfw-critical",
          [{parent,"netscreenfw"},
           {prematch,"system-critical-\\.+ from |"},
           {prematch,"system-alert-\\.+ from"},
           {regex,"system-(\\w+)-(\\d+): \\.+"},
           {regex,"from\\.+(\\d+.\\d+.\\d+.\\d+)"},
           {order,"action, id, srcip"}]},
 {decoder,"netscreenfw-admin",
          [{parent,"netscreenfw"},
           {regex,"system-(\\w+)-(\\d+):"},
           {order,"action, id"}]},
 {decoder,"pix",
          [{prematch,"^%PIX-|^\\w\\w\\w \\d\\d \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d: %PIX-|"},
           {prematch,"^%ASA-|^\\w\\w\\w \\d\\d \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d: %ASA-|"},
           {prematch,"^%FWSM-|^\\w\\w\\w \\d\\d \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d: %FWSM-"}]},
 {decoder,"pix-fw1",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^2-106001"},
           {regex,"^(\\S+): \\w+ (\\w+) \\S+ (\\S+) from"},
           {regex,"(\\S+)/(\\S+) to (\\S+)/(\\S+)"},
           {order,"id, protocol, action, srcip, srcport, dstip, dstport"}]},
 {decoder,"pix-fw2",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^3-710003|^7-710002|^7-710005"},
           {regex,"^(\\S+): (\\S+) \\w+ (\\w+)\\.+from"},
           {regex,"(\\S+)/(\\S+) to \\w+:(\\S+)/(\\S+)"},
           {order,"id, protocol, action, srcip, srcport, dstip, dstport"}]},
 {decoder,"pix-fw3",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^4-106023"},
           {regex,"^(\\S+): (\\w+) (\\w+) src \\w+:"},
           {regex,"(\\S+)/(\\S+) dst \\w+:(\\S+)/(\\S+)"},
           {order,"id, action, protocol, srcip, srcport, dstip, dstport"}]},
 {decoder,"pix-fw4",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^4-106019"},
           {regex,"^(\\S+): IP packet from (\\S+) to"},
           {regex,"(\\S+), protocol (\\w+) (\\w+)"},
           {order,"id, srcip, dstip, protocol, action"}]},
 {decoder,"pix-fw5",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^2-106006|^2-106007"},
           {regex,"^(\\S+): (\\w+) \\S+ (\\w+) from"},
           {regex,"(\\d+.\\d+.\\d+.\\d+)/(\\d+) to (\\d+.\\d+.\\d+.\\d+)/(\\d+)"},
           {order,"id, action, protocol, srcip, srcport, dstip, dstport"}]},
 {decoder,"pix-fw6",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^6-106015"},
           {regex,"^(\\S+): (\\w+) (\\w+) \\S+ \\S+ (\\S+) from"},
           {regex,"(\\S+)/(\\S+) to (\\S+)/(\\S+)"},
           {order,"id, action, protocol, srcip, srcport, dstip, dstport"}]},
 {decoder,"pix-fw7",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^6-305012"},
           {regex,"^(\\S+): (\\w+) \\w+ (\\w+) translation"},
           {regex,"from \\w+:(\\S+)/(\\d+) to \\w+:(\\S+)/(\\d+)"},
           {order,"id, action, protocol, srcip, srcport, dstip, dstport"}]},
 {decoder,"pix-fw8",
          [{parent,"pix"},
           {type,"firewall"},
           {prematch,"^3-106011|^3-106010"},
           {regex,"^(\\S+): (\\w+) \\.+ (\\w+) src"},
           {regex,"\\w+:(\\S+)/(\\d+) dst \\w+:(\\S+)/(\\d+)"},
           {order,"id, action, protocol, srcip, srcport, dstip, dstport"}]},
 {decoder,"pix-attacks",
          [{parent,"pix"},
           {prematch,"^2-106012: |^2-106017: |"},
           {prematch,"^2-106020|^1-106021|^1-106022|"},
           {prematch,"^4-4000"},
           {regex,"^(\\S+): \\.+ from (\\d+.\\d+.\\d+.\\d+)"},
           {order,"id, srcip"}]},
 {decoder,"pix-srcip",
          [{parent,"pix"},
           {prematch,"^6-605004|^6-308001|^6-605005"},
           {regex,"^(\\S+): \\.+ (\\d+.\\d+.\\d+.\\d+)"},
           {order,"id, srcip"}]},
 {decoder,"pix-generic",[{parent,"pix"},{regex,"^(\\S+):"},{order,"id"}]},
 {decoder,"cisco-vpn-concentrator",
          [{prematch,"^\\d+ \\d\\d/\\d\\d/\\d\\d\\d\\d \\S+ SEV=\\d"},
           {after_prematch,"^(\\S+) RPT=\\d+ (\\d+.\\d+.\\d+.\\d+)"},
           {order,"id, srcip"}]},
 {decoder,"snort",[{program_name,"^snort"}]},
 {decoder,"snort",[{type,"ids"},{prematch,"^[**] [\\d+:\\d+:\\d+]"}]},
 {decoder,"snort2",
          [{parent,"snort"},
           {type,"ids"},
           {prematch,"^[**] |^[\\d+:\\d+:\\d+]"},
           {regex,"^[**] [(\\d+:\\d+:\\d+)] \\.+ (\\d+.\\d+.\\d+.\\d+)\\p*\\d* ->"},
           {regex,"(\\d+.\\d+.\\d+.\\d+)|^[(\\d+:\\d+:\\d+)] \\.+"},
           {regex,"(\\d+.\\d+.\\d+.\\d+)\\p*\\d* -> (\\d+.\\d+.\\d+.\\d+)"},
           {order,"id,srcip,dstip"},
           {fts,"name,id,srcip,dstip"}]},
 {decoder,"suhosin",
          [{program_name,"^suhosin"},
           {type,"ids"},
           {regex,"^ALERT - (\\.+) \\(attacker '(\\d+.\\d+.\\d+.\\d+)',"},
           {order,"id, srcip"},
           {fts,"name, location, id"}]},
 {decoder,"dragon-nids",
          [{type,"ids"},
           {prematch,"^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d\\|"},
           {after_prematch,"^\\S+\\|(\\S+)\\|"},
           {regex,"(\\d+.\\d+.\\d+.\\d+)\\|(\\d+.\\d+.\\d+.\\d+)\\|"},
           {order,"id, srcip, dstip"},
           {fts,"name, id, srcip, dstip"}]},
 {decoder,"horde_imp",[{prematch,"^[\\w+] [imp] |^[\\w+] [horde]"}]},
 {decoder,"horde_imp_success",
          [{parent,"horde_imp"},
           {prematch,"^Login success"},
           {after_prematch,"^for (\\S+) [(\\d+.\\d+.\\d+.\\d+)]"},
           {order,"user, srcip"}]},
 {decoder,"horde_imp_failed",
          [{parent,"horde_imp"},
           {prematch,"^FAILED LOGIN"},
           {after_prematch,"^ (\\d+.\\d+.\\d+.\\d+) to \\S+ as (\\S+)"},
           {order,"srcip, user"}]},
 {decoder,"wordpress",
          [{program_name,"^WPsyslog"},
           {prematch,"^["},
           {after_prematch,"^(\\d+.\\d+.\\d+.\\d+)"},
           {order,"srcip"}]},
 {decoder,"roundcube",
          [{program_name,"^roundcube"},
           {prematch,"^[\\d\\d-\\w\\w\\w-\\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d \\S+]"}]},
 {decoder,"roundcube-success",
          [{parent,"roundcube"},
           {prematch,"^: Successful login for"},
           {after_prematch,"^(\\S+) \\(id \\d+\\) from (\\d+.\\d+.\\d+.\\d+)$"},
           {order,"user, srcip"}]},
 {decoder,"roundcube-denied",
          [{parent,"roundcube"},
           {prematch,"^ \\w+ Error: Authentication"},
           {after_prematch,"^for (\\.+) failed"},
           {order,"user"}]},
 {decoder,"apache-errorlog",[{program_name,"^httpd"}]},
 {decoder,"apache-errorlog",[{prematch,"^[warn] |^[notice] |^[error]"}]},
 {decoder,"apache-errorlog-ip",
          [{parent,"apache-errorlog"},
           {prematch,"^[client"},
           {after_prematch,"^ (\\d+.\\d+.\\d+.\\d+)]"},
           {order,"srcip"}]},
 {decoder,"nginx-errorlog",
          [{prematch,"^20\\d\\d/\\d\\d/\\d\\d \\d\\d:\\d\\d:\\d\\d ["}]},
 {decoder,"nginx-errorlog-ip",
          [{parent,"nginx-errorlog"},
           {prematch,", client: \\S+, server: \\S+, request: \"\\S+"},
           {regex,", client: (\\d+.\\d+.\\d+.\\d+),"},
           {order,"srcip"}]},
 {decoder,"web-accesslog",
          [{type,"web-log"},
           {prematch,"^\\d+.\\d+.\\d+.\\d+"},
           {regex,"^(\\d+.\\d+.\\d+.\\d+) \\S+ \\S+ [\\S+ \\S\\d+]"},
           {regex,"\"\\w+ (\\S+) HTTP\\S+ (\\d+)"},
           {order,"srcip, url, id"}]},
 {decoder,"windows-date-format",
          [{prematch,"^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d"}]},
 {decoder,"windows-firewall",
          [{parent,"windows-date-format"},
           {type,"firewall"},
           {use_own_name,"true"},
           {prematch,"^OPEN|^CLOSE|^DROP"},
           {regex,"^(\\w+) (\\w+)"},
           {regex,"(\\S+) (\\S+) (\\d+) (\\d+)"},
           {order,"action, protocol, srcip, dstip, srcport, dstport"}]},
 {decoder,"web-accesslog-iis5",
          [{parent,"windows-date-format"},
           {type,"web-log"},
           {use_own_name,"true"},
           {prematch,"^\\d+.\\d+.\\d+.\\d+ \\S+ W3SVC"},
           {regex,"^(\\d+.\\d+.\\d+.\\d+) \\S+ \\S+ \\S+ \\S+"},
           {regex,"\\d+ \\S+ (\\S+ \\S+) (\\d+)"},
           {order,"srcip,url,id"}]},
 {decoder,"web-accesslog-iis6",
          [{parent,"windows-date-format"},
           {type,"web-log"},
           {use_own_name,"true"},
           {prematch,"^W3SVC\\d+ \\S+ \\S+ \\S+"},
           {after_prematch,"^(\\S+ \\S+) \\d+ \\S+ (\\d+.\\d+.\\d+.\\d+)"},
           {regex,"\\S+ \\S+ \\S+ \\S+ \\S+ (\\d+)"},
           {order,"url, srcip, id"}]},
 {decoder,"msftp",
          [{parent,"windows-date-format"},
           {use_own_name,"true"},
           {prematch,"^\\d+.\\d+.\\d+.\\d+ \\S+ MSFTPSVC"},
           {regex,"^(\\d+.\\d+.\\d+.\\d+) (\\S+) \\S+ \\S+ \\S+"},
           {regex,"\\d+ [\\d+](\\S+) \\S+ \\S+ (\\d+)"},
           {order,"srcip,user,action,id"}]},
 {decoder,"msexchange",
          [{parent,"windows-date-format"},
           {use_own_name,"true"},
           {prematch,"^\\d+.\\d+.\\d+.\\d+ \\S+ SMTPSVC"},
           {regex,"^(\\d+.\\d+.\\d+.\\d+) \\S+ \\S+ \\S+ \\S+"},
           {regex,"\\d+ (\\S+) \\S+ \\S+ (\\d+)"},
           {order,"srcip, action, id"}]},
 {decoder,"racoon",
          [{prematch,"^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d:"}]},
 {decoder,"racoon-failed",
          [{parent,"racoon"},
           {use_own_name,"true"},
           {prematch,"^ERROR: couldn't find the pskey"},
           {after_prematch,"^for (\\d+.\\d+.\\d+.\\d+)"},
           {order,"srcip"}]},
 {decoder,"racoon-action",
          [{parent,"racoon"},{regex,"^(\\w+):"},{order,"action"}]},
 {decoder,"squid-accesslog",
          [{type,"squid"},
           {prematch,"^\\d+ \\d+.\\d+.\\d+.\\d+"},
           {regex,"^\\d+ (\\d+.\\d+.\\d+.\\d+) (\\w+)/(\\d+) \\d+ \\w+ (\\S+)"},
           {order,"srcip,action,id,url"}]},
 {decoder,"windows",
          [{type,"windows"},
           {prematch,"^WinEvtLog:"},
           {after_prematch,"^\\.+: (\\w+)\\((\\d+)\\): (\\.+):"},
           {regex,"(\\.+): \\.+: (\\S+):"},
           {order,"status, id, extra_data, user, system_name"},
           {fts,"name, location, user, system_name"}]},
 {decoder,"windows-ntsyslog",
          [{type,"windows"},
           {prematch,"^security[\\w+] \\d+"},
           {regex,"^(\\w+)[(\\w+)] (\\d+)"},
           {order,"extra_data, status, id"}]},
 {decoder,"windows-snare",
          [{type,"windows"},
           {prematch,"^MSWinEventLog\\t\\d\\t\\.+\\t\\d+\\t\\w\\w\\w \\w\\w\\w \\d\\d \\d\\d"},
           {after_prematch,"^:\\d\\d:\\d\\d \\d\\d\\d\\d\\t(\\d+)\\t(\\.+)"},
           {regex,"\\t(\\.+)\\t\\.+\\t(\\.+)\\t(\\.+)\\t"},
           {order,"id, extra_data, user, status, system_name"},
           {fts,"name, id, location, user, system_name"}]},
 {decoder,"symantec-av",
          [{prematch,"^\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w,"},
           {after_prematch,"^(\\d+),\\d+,\\d+,(\\S+),(\\.+),"},
           {order,"id, system_name, extra_data"},
           {fts,"name, location, id, system_name, extra_data"}]},
 {decoder,"symantec-websecurity",
          [{prematch,"^\\d\\d\\d\\d\\d\\d\\d\\d,\\d\\d\\d+,"},
           {plugin_decoder,"SymantecWS_Decoder"}]},
 {decoder,"trend-osce",
          [{prematch,"^20\\d\\d\\d\\d\\d\\d\\<;>"},
           {after_prematch,"^\\d+\\<;>\\S+\\<;>(\\d+)\\<;"},
           {order,"id"}]},
 {decoder,"ossec",[{prematch,"^ossec:"},{type,"ossec"}]},
 {decoder,"ossec-agent",
          [{parent,"ossec"},
           {type,"ossec"},
           {prematch,"^Agent started:"},
           {after_prematch,"^ '(\\S+)'"},
           {order,"extra_data"},
           {fts,"name, location, extra_data"}]},
 {decoder,"ossec-alert",
          [{program_name,"^ossec$"},{plugin_decoder,"OSSECAlert_Decoder"}]},
 {decoder,"zeus",
          [{prematch,"^[\\d\\d/\\w\\w\\w/\\d\\d\\d\\d:\\d\\d:\\d\\d:\\d\\d \\S+]"},
           {after_prematch,"host=(\\S+),"},
           {order,"srcip"}]},
 {decoder,"vmware",
          [{prematch,"^[\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d.\\d\\d\\d '\\S+' \\d+"}]},
 {decoder,"vmware-extra",
          [{parent,"vmware"},{regex,"^(\\w+)] \\S+ \\S+"},{order,"status"}]},
 {decoder,"vmware-extra",
          [{parent,"vmware"},
           {regex,"^: User (\\w+)@(\\d+.\\d+.\\d+.\\d+)"},
           {regex,"logged |^: Failed login \\w+ for (\\w+)@(\\d+.\\d+.\\d+.\\d+)"},
           {order,"user, srcip"}]},
 {decoder,"vmware-syslog",[{program_name,"vmware"}]},
 {decoder,"vmware-success",
          [{parent,"vmware-syslog"},
           {prematch,"^Accepted|^Rejected"},
           {after_prematch,"^ \\S+ for user (\\S+) from (\\S+)$"},
           {order,"user, srcip"}]},
 {decoder,"vmware-login",
          [{parent,"vmware-syslog"},
           {prematch,"^login from"},
           {after_prematch,"^(\\S+) as"},
           {order,"srcip"}]},
 {decoder,"solaris_bsm",[{program_name,"^audit$"}]},
 {decoder,"solaris_bsm_session",
          [{parent,"solaris_bsm"},
           {prematch,"\\w+ session \\d+ by"},
           {regex,"(\\w+) session \\d+ by"},
           {order,"status"}]},
 {decoder,"solaris_bsm_session",
          [{parent,"solaris_bsm"},
           {regex,"^ \\S+ as \\S+:\\S+ from (\\S+)"},
           {order,"srcip"}]},
 {decoder,"asterisk",[{program_name,"^asterisk"}]},
 {decoder,"asterisk-denied",
          [{parent,"asterisk"},
           {prematch,"^NOTICE[\\d+]: \\S+ in \\S+: Registration from"},
           {after_prematch,"^\\S+ failed for '(\\d+.\\d+.\\d+.\\d+)'"},
           {order,"srcip"}]},
 {decoder,"cisco-ios",[{prematch,"^%\\w+-\\d-\\w+:"}]},
 {decoder,"cisco-ios",[{program_name,[]},{prematch,"^%\\w+-\\d-\\w+:"}]},
 {decoder,"cisco-ios-acl",
          [{parent,"cisco-ios"},
           {type,"firewall"},
           {prematch,"^%SEC-6-IPACCESSLOGP:"},
           {after_prematch,"^list \\S+ (\\w+) (\\w+)"},
           {regex,"(\\S+)\\((\\d+)\\) -> (\\S+)\\((\\d+)\\),"},
           {order,"action, protocol, srcip, srcport, dstip, dstport"}]},
 {decoder,"cisco-ios-ids",
          [{parent,"cisco-ios"},
           {type,"ids"},
           {prematch,"^%IPS-4-SIGNATURE:"},
           {after_prematch,"^Sig:(\\d+) \\.+[(\\S+):(\\d+) ->"},
           {regex,"(\\S+):(\\d+)]"},
           {order,"id, srcip, srcport, dstip, dstport"},
           {fts,"name, id, srcip, dstip"},
           {ftscomment,"First time Cisco IOS IDS/IPS module rule fired."}]},
 {decoder,"cisco-ios-generic",
          [{parent,"cisco-ios"},{regex,"^(%\\w+-\\d-\\w+):"},{order,"id"}]},
 {decoder,"checkpoint-syslog",
          [{program_name,"^Checkpoint"},
           {prematch,"^\\s+\\S+ \\d\\d:\\d\\d:\\d\\d"}]},
 {decoder,"checkpoint-syslog-fw",
          [{parent,"checkpoint-syslog"},
           {type,"firewall"},
           {prematch,"^drop|^accept|^reject"},
           {regex,"^(\\w+)\\s+\\S+ \\p\\S+ rule:\\.+"},
           {regex,"src: (\\d+.\\d+.\\d+.\\d+); dst: (\\d+.\\d+.\\d+.\\d+); proto: (\\S+);"},
           {order,"action,srcip,dstip,protocol"}]},
 {decoder,"checkpoint-syslog-fw",
          [{parent,"checkpoint-syslog"},
           {type,"firewall"},
           {regex,"service: (\\d+); s_port: (\\d+);"},
           {order,"dstport,srcport"}]},
 {decoder,"checkpoint-syslog-ids",
          [{parent,"checkpoint-syslog"},
           {type,"ids"},
           {prematch,"^monitor|^drop"},
           {after_prematch,"attack: (\\.+);"},
           {regex,"src: (\\d+.\\d+.\\d+.\\d+); dst: (\\d+.\\d+.\\d+.\\d+);"},
           {regex,"proto: (\\S+);"},
           {order,"extra_data, srcip, dstip, protocol"},
           {fts,"name, extra_data, srcip, dstip"},
           {ftscomment,"First time Checkpoint rule fired."}]},
 {decoder,"ms-dhcp-ipv4",
          [{prematch,"^\\d\\d,\\d+/\\d+/\\d\\d\\d\\d,\\d+:\\d+:\\d+,"},
           {regex,"^(\\d\\d),"},
           {order,"id"}]},
 {decoder,"ms-dhcp-ipv6",
          [{prematch,"^\\d\\d\\d\\d\\d,\\d\\d/\\d\\d/\\d\\d,\\d\\d:\\d\\d:\\d\\d,"},
           {regex,"^(\\d\\d\\d\\d\\d),"},
           {order,"id"}]}]